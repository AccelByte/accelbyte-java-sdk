/*
 * Copyright (c) 2022 AccelByte Inc. All Rights Reserved
 * This is licensed software from AccelByte Inc, for limitations
 * and restrictions contact your company contract manager.
 *
 * Code generated. DO NOT EDIT.
 */

package net.accelbyte.sdk.api.iam.operations.o_auth2_0;

import java.io.*;
import java.util.*;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;
import net.accelbyte.sdk.api.iam.models.*;
import net.accelbyte.sdk.core.HttpResponseException;
import net.accelbyte.sdk.core.Operation;
import net.accelbyte.sdk.core.util.Helper;

/**
 * PlatformTokenGrantV3
 *
 * <p>Platform token grant specifically used for performing token grant using platform, e.g. Steam,
 * Justice, etc. The endpoint automatically create an account if the account associated with the
 * platform is not exists yet. This endpoint requires all requests to have Authorization header set
 * with Basic access authentication constructed from client id and client secret. For publisher-game
 * namespace schema : Specify only either platform_token or device_id. Device token grant should be
 * requested along with device_id parameter against game namespace. Another 3rd party platform token
 * grant should be requested along with platform_token parameter against publisher namespace.
 *
 * <p>## 2FA remember device
 *
 * <p>To remember device for 2FA, should provide cookie: device_token or header: Device-Token
 *
 * <p>## Supported platforms:
 *
 * <p>* steam : The platform_tokenâs value is the authentication code returned by Steam.
 *
 * <p>* steamopenid : Steam's user authentication method using OpenID 2.0. The platform_token's
 * value is URL generated by Steam on web authentication
 *
 * <p>* facebook : The platform_tokenâs value is the authorization code returned by Facebook OAuth
 *
 * <p>* google : The platform_tokenâs value is the authorization code returned by Google OAuth
 *
 * <p>* oculus : The platform_tokenâs value is a string composed of Oculus's user ID and the nonce
 * separated by a colon (:).
 *
 * <p>* twitch : The platform_tokenâs value is the authorization code returned by Twitch OAuth.
 *
 * <p>* discord : The platform_tokenâs value is the authorization code returned by Discord OAuth
 *
 * <p>* android : The device_id is the Androidâs device ID
 *
 * <p>* ios : The device_id is the iOSâs device ID.
 *
 * <p>* apple : The platform_tokenâs value is the authorization code returned by Apple OAuth.(We
 * will use this code to generate APP token)
 *
 * <p>* device : Every device that doesânt run Android and iOS is categorized as a device. The
 * device_id is the deviceâs ID.
 *
 * <p>* justice : The platform_tokenâs value is the designated userâs access token.
 *
 * <p>* epicgames : The platform_tokenâs value is an access-token obtained from Epicgames EOS
 * Account Service.
 *
 * <p>* ps4 : The platform_tokenâs value is the authorization code returned by Sony OAuth.
 *
 * <p>* ps5 : The platform_tokenâs value is the authorization code returned by Sony OAuth.
 *
 * <p>* nintendo : The platform_tokenâs value is the authorization code(id_token) returned by
 * Nintendo OAuth.
 *
 * <p>* awscognito : The platform_tokenâs value is the aws cognito access token or id token (JWT).
 *
 * <p>* live : The platform_tokenâs value is xbox XSTS token
 *
 * <p>* xblweb : The platform_tokenâs value is code returned by xbox after login
 *
 * <p>* netflix : The platform_tokenâs value is GAT (Gamer Access Token) returned by Netflix
 * backend
 *
 * <p>* snapchat : The platform_tokenâs value is the authorization code returned by Snapchat
 * OAuth.
 *
 * <p>* for specific generic oauth (OIDC) : The platform_tokenâs value should be the same type as
 * created OIDC auth type whether it is auth code, idToken or bearerToken.
 *
 * <p>## Account Group
 *
 * <p>Several platforms are grouped under account groups. The accounts on these platforms have the
 * same platform user id. Login using one of these platform will returns the same IAM user.
 *
 * <p>Following is the current registered account grouping:
 *
 * <p>* (psn) ps4web
 *
 * <p>* (psn) ps4
 *
 * <p>* (psn) ps5
 *
 * <p>## Access Token Content
 *
 * <p>Following is the access tokenâs content:
 *
 * <p>*
 *
 * <p>namespace. It is the namespace the token was generated from.
 *
 * <p>*
 *
 * <p>display_name. The display name of the sub. It is empty if the token is generated from the
 * client credential
 *
 * <p>*
 *
 * <p>roles. The subâs roles. It is empty if the token is generated from the client credential
 *
 * <p>*
 *
 * <p>namespace_roles. The subâs roles scoped to namespace. Improvement from roles, which make the
 * role scoped to specific namespace instead of global to publisher namespace
 *
 * <p>*
 *
 * <p>permissions. The sub or audâ permissions
 *
 * <p>*
 *
 * <p>bans. The subâs list of bans. It is used by the IAM client for validating the token.
 *
 * <p>*
 *
 * <p>jflgs. It stands for Justice Flags. It is a special flag used for storing additional status
 * information regarding the sub. It is implemented as a bit mask. Following explains what each bit
 * represents:
 *
 * <p>* 1: Email Address Verified
 *
 * <p>* 2: Phone Number Verified
 *
 * <p>* 4: Anonymous
 *
 * <p>* 8: Suspicious Login
 *
 * <p>*
 *
 * <p>aud. The aud is the client ID.
 *
 * <p>*
 *
 * <p>iat. The time the token issues at. It is in Epoch time format
 *
 * <p>*
 *
 * <p>exp. The time the token expires. It is in Epoch time format
 *
 * <p>*
 *
 * <p>sub. The UserID. The sub is omitted if the token is generated from client credential
 *
 * <p>## Bans
 *
 * <p>The JWT contains user's active bans with its expiry date. List of ban types can be obtained
 * from /bans.
 *
 * <p>action code : 10704
 */
@Getter
@Setter
public class PlatformTokenGrantV3 extends Operation {
  /** generated field's value */
  private String path = "/iam/v3/oauth/platforms/{platformId}/token";

  private String method = "POST";
  private List<String> consumes = Arrays.asList("application/x-www-form-urlencoded");
  private List<String> produces = Arrays.asList("application/json");
  private String locationQuery = null;
  /** fields as input parameter */
  private String platformId;

  private String clientId;
  private Boolean createHeadless;
  private String deviceId;
  private String macAddress;
  private String platformToken;
  private Boolean skipSetCookie;

  /**
   * @param platformId required
   */
  @Builder
  // @deprecated 2022-08-29 - All args constructor may cause problems. Use builder instead.
  @Deprecated
  public PlatformTokenGrantV3(
      String platformId,
      String clientId,
      Boolean createHeadless,
      String deviceId,
      String macAddress,
      String platformToken,
      Boolean skipSetCookie) {
    this.platformId = platformId;
    this.clientId = clientId;
    this.createHeadless = createHeadless;
    this.deviceId = deviceId;
    this.macAddress = macAddress;
    this.platformToken = platformToken;
    this.skipSetCookie = skipSetCookie;

    securities.add("Basic");
  }

  @Override
  public Map<String, String> getPathParams() {
    Map<String, String> pathParams = new HashMap<>();
    if (this.platformId != null) {
      pathParams.put("platformId", this.platformId);
    }
    return pathParams;
  }

  @Override
  public Map<String, Object> getFormParams() {
    Map<String, Object> formDataParams = new HashMap<>();
    if (this.clientId != null) {
      formDataParams.put("client_id", this.clientId);
    }
    if (this.createHeadless != null) {
      formDataParams.put(
          "createHeadless",
          this.createHeadless == null ? null : String.valueOf(this.createHeadless));
    }
    if (this.deviceId != null) {
      formDataParams.put("device_id", this.deviceId);
    }
    if (this.macAddress != null) {
      formDataParams.put("macAddress", this.macAddress);
    }
    if (this.platformToken != null) {
      formDataParams.put("platform_token", this.platformToken);
    }
    if (this.skipSetCookie != null) {
      formDataParams.put(
          "skipSetCookie", this.skipSetCookie == null ? null : String.valueOf(this.skipSetCookie));
    }
    return formDataParams;
  }

  @Override
  public boolean isValid() {
    if (this.platformId == null) {
      return false;
    }
    return true;
  }

  public OauthmodelTokenResponse parseResponse(int code, String contentType, InputStream payload)
      throws HttpResponseException, IOException {
    if (code != 200) {
      final String json = Helper.convertInputStreamToString(payload);
      throw new HttpResponseException(code, json);
    }
    final String json = Helper.convertInputStreamToString(payload);
    return new OauthmodelTokenResponse().createFromJson(json);
  }
}
