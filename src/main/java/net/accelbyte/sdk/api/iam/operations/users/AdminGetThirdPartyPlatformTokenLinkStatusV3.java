/*
 * Copyright (c) 2022 AccelByte Inc. All Rights Reserved
 * This is licensed software from AccelByte Inc, for limitations
 * and restrictions contact your company contract manager.
 *
 * Code generated. DO NOT EDIT.
 */

package net.accelbyte.sdk.api.iam.operations.users;

import java.io.*;
import java.util.*;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;
import net.accelbyte.sdk.api.iam.models.*;
import net.accelbyte.sdk.core.HttpResponseException;
import net.accelbyte.sdk.core.Operation;
import net.accelbyte.sdk.core.util.Helper;

/**
 * AdminGetThirdPartyPlatformTokenLinkStatusV3
 *
 * <p>Admin get the link status of the third party platform token with user id.
 *
 * <p>This endpoint is used for checking whether the third party user represented by third party
 * token is linked with the corresponding user id.
 *
 * <p>## Supported platforms: - **steam**: The platform_tokenâs value is the authentication code
 * returned by Steam. - **steamopenid**: Steam's user authentication method using OpenID 2.0. The
 * platform_token's value is URL generated by Steam on web authentication - **facebook**: The
 * platform_tokenâs value is the authorization code returned by Facebook OAuth - **google**: The
 * platform_tokenâs value is the authorization code returned by Google OAuth - **oculus**: The
 * platform_tokenâs value is a string composed of Oculus's user ID and the nonce separated by a
 * colon (:). - **twitch**: The platform_tokenâs value is the authorization code returned by
 * Twitch OAuth. - **discord**: The platform_tokenâs value is the authorization code returned by
 * Discord OAuth - **android**: The device_id is the Androidâs device ID - **ios**: The device_id
 * is the iOSâs device ID. - **apple**: The platform_tokenâs value is the authorization code
 * returned by Apple OAuth.(We will use this code to generate APP token) - **device**: Every device
 * that doesânt run Android and iOS is categorized as a device. The device_id is the deviceâs
 * ID. - **justice**: The platform_tokenâs value is the designated userâs access token. -
 * **epicgames**: The platform_tokenâs value is an access-token obtained from Epicgames EOS
 * Account Service. - **ps4**: The platform_tokenâs value is the authorization code returned by
 * Sony OAuth. - **ps5**: The platform_tokenâs value is the authorization code returned by Sony
 * OAuth. - **nintendo**: The platform_tokenâs value is the authorization code(id_token) returned
 * by Nintendo OAuth. - **awscognito**: The platform_tokenâs value is the aws cognito access token
 * or id token (JWT). - **live**: The platform_tokenâs value is xbox XSTS token - **xblweb**: The
 * platform_tokenâs value is code returned by xbox after login - **netflix**: The
 * platform_tokenâs value is GAT (Gamer Access Token) returned by Netflix backend - **snapchat**:
 * The platform_tokenâs value is the authorization code returned by Snapchat OAuth.
 */
@Getter
@Setter
public class AdminGetThirdPartyPlatformTokenLinkStatusV3 extends Operation {
  /** generated field's value */
  private String path =
      "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}/linkStatus";

  private String method = "POST";
  private List<String> consumes = Arrays.asList("application/x-www-form-urlencoded");
  private List<String> produces = Arrays.asList("application/json");
  private String locationQuery = null;

  /** fields as input parameter */
  private String namespace;

  private String platformId;
  private String userId;
  private String platformToken;

  /**
   * @param namespace required
   * @param platformId required
   * @param userId required
   * @param platformToken required
   */
  @Builder
  // @deprecated 2022-08-29 - All args constructor may cause problems. Use builder instead.
  @Deprecated
  public AdminGetThirdPartyPlatformTokenLinkStatusV3(
      String namespace, String platformId, String userId, String platformToken) {
    this.namespace = namespace;
    this.platformId = platformId;
    this.userId = userId;
    this.platformToken = platformToken;

    securities.add("Bearer");
  }

  @Override
  public Map<String, String> getPathParams() {
    Map<String, String> pathParams = new HashMap<>();
    if (this.namespace != null) {
      pathParams.put("namespace", this.namespace);
    }
    if (this.platformId != null) {
      pathParams.put("platformId", this.platformId);
    }
    if (this.userId != null) {
      pathParams.put("userId", this.userId);
    }
    return pathParams;
  }

  @Override
  public Map<String, Object> getFormParams() {
    Map<String, Object> formDataParams = new HashMap<>();
    if (this.platformToken != null) {
      formDataParams.put("platformToken", this.platformToken);
    }
    return formDataParams;
  }

  @Override
  public boolean isValid() {
    if (this.namespace == null) {
      return false;
    }
    if (this.platformId == null) {
      return false;
    }
    if (this.userId == null) {
      return false;
    }
    if (this.platformToken == null) {
      return false;
    }
    return true;
  }

  public ModelTokenThirdPartyLinkStatusResponse parseResponse(
      int code, String contentType, InputStream payload) throws HttpResponseException, IOException {
    if (code != 200) {
      final String json = Helper.convertInputStreamToString(payload);
      throw new HttpResponseException(code, json);
    }
    final String json = Helper.convertInputStreamToString(payload);
    return new ModelTokenThirdPartyLinkStatusResponse().createFromJson(json);
  }
}
