library(
  identifier: 'jenkins-shared-library@master',
  retriever: modernSCM(
    [
      $class: 'GitSCMSource',
      remote: 'https://github.com/dhanarab/jenkins-pipeline-library.git'
    ]
  )
)

jobChannel = '#activity-extend-codegen-sdk'

pipeline {
  agent {
    label "extend-builder-batch"
  }
  stages {
    stage('Setup') {
      agent {
        docker {
          image 'gradle:8.5-jdk8'
          args '-u root:root -v cov-analysis:/tmp/cov-analysis'
          reuseNode true
        }
      }
      steps {
        script {
          def arch = sh(script: 'uname -m', returnStdout: true).trim()
          if (arch == 'aarch64') {
            sh "curl -L '${env.COV_ANALYSIS_ARM64_TGZ_SHA1_URL}' -o /tmp/cov-analysis/cov-analysis-arm64.tar.gz.sha1"
            sh "[ -f /tmp/cov-analysis/cov-analysis-arm64.tar.gz ] || curl -L '${env.COV_ANALYSIS_ARM64_TGZ_URL}' -o /tmp/cov-analysis/cov-analysis-arm64.tar.gz"
            sh "(echo \$(cat /tmp/cov-analysis/cov-analysis-arm64.tar.gz.sha1) /tmp/cov-analysis/cov-analysis-arm64.tar.gz | sha1sum -c) || (echo 'Download corrupted. Please try again!' && rm -f /tmp/cov-analysis/cov-analysis-arm64.tar.gz.sha1 /tmp/cov-analysis/cov-analysis-arm64.tar.gz && exit 100)"
          }
          else {
            sh "curl -L '${env.COV_ANALYSIS_TGZ_SHA1_URL}' -o /tmp/cov-analysis/cov-analysis.tar.gz.sha1"
            sh "[ -f /tmp/cov-analysis/cov-analysis.tar.gz ] || curl -L '${env.COV_ANALYSIS_TGZ_URL}' -o /tmp/cov-analysis/cov-analysis.tar.gz"
            sh "(echo \$(cat /tmp/cov-analysis/cov-analysis.tar.gz.sha1) /tmp/cov-analysis/cov-analysis.tar.gz | sha1sum -c) || (echo 'Download corrupted. Please try again!' && rm -f /tmp/cov-analysis/cov-analysis.tar.gz.sha1 /tmp/cov-analysis/cov-analysis.tar.gz && exit 100)"
          }
        }
      }
    }
    stage('Coverity') {
      agent {
        docker {
          image 'gradle:8.5-jdk8'
          args "-e HOME=/tmp -v cov-analysis:/tmp/cov-analysis"
          reuseNode true
        }
      }
      steps {
        script {
          def arch = sh(script: 'uname -m', returnStdout: true).trim()
          if (arch == 'aarch64') {
            sh "mkdir -p /tmp/cov-analysis-install && rm -rf /tmp/cov-analysis-install/* && tar xf /tmp/cov-analysis/cov-analysis-arm64.tar.gz -C /tmp/cov-analysis-install --strip-components=1"
          }
          else {
            sh "mkdir -p /tmp/cov-analysis-install && rm -rf /tmp/cov-analysis-install/* && tar xf /tmp/cov-analysis/cov-analysis.tar.gz -C /tmp/cov-analysis-install --strip-components=1"
          }

          sh "git config --global --add safe.directory '*' && git clean -xfd"
          sh "PATH=/tmp/cov-analysis-install/bin:\$PATH cov-build --dir cov-int bash gradlew build -x test --no-daemon"
          sh "tar caf cov-int.tar.gz cov-int"

          withCredentials([usernamePassword(credentialsId: 'coverity-accelbyte-java-sdk', passwordVariable: 'COVERITY_TOKEN', usernameVariable: 'COVERITY_EMAIL')]) {
            gitCommitHashShort = git.getCommitHashShort()
            sh "curl --form token=\$COVERITY_TOKEN --form email=\$COVERITY_EMAIL --form file=@cov-int.tar.gz --form version='${gitCommitHashShort}' --form description='Automated Coverity Scan' 'https://scan.coverity.com/builds?project=accelbyte-java-sdk'"
          }
        }
      }
    }
  }
  post {
    //success {
      //script {
        //gitRepositoryName = git.getRepositoryName()
        //gitBranchName = sh(script: "echo ${env.GIT_BRANCH} | grep -oP '(?<=origin/).+'", returnStdout: true).trim()
        //gitCommitHashShort = git.getCommitHashShort()
        //gitCommitMessage = git.getCommitMessage()
        //
        //message = """
        //    :white_check_mark: <${env.BUILD_URL}|${env.JOB_NAME}-${env.BUILD_NUMBER}> *updated*
        //    
        //    |*${gitRepositoryName}:*
        //    |`${gitBranchName}` `${gitCommitHashShort}` 
        //    |${gitCommitMessage}
        //    
        //    |""".stripMargin()
        //slackSend(channel: jobChannel, color: '#36B37E', message: message)
      //}
    //}
    failure {
      script {
        message = """
            :no_entry: <${env.BUILD_URL}|${env.JOB_NAME}-${env.BUILD_NUMBER}> *failed*
            
            |""".stripMargin()
        slackSend(channel: jobChannel, color: '#FF0000', message: message)
      }
    }
  }
}